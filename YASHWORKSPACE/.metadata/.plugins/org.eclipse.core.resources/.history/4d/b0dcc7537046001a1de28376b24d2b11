package com.yash.arci.controllers;

import java.text.ParseException;
import java.util.HashMap;
import java.util.List;

import javax.annotation.security.RolesAllowed;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.yash.arci.dto.ApiResponse;
import com.yash.arci.dto.AssociateFeedbackDto;
import com.yash.arci.dto.ScheduledInterviewDto;
import com.yash.arci.dto.SearchAssociateDto;
import com.yash.arci.dto.SearchAssociateResponseDto;
import com.yash.arci.model.User;
import com.yash.arci.service.AppNotifcationService;
import com.yash.arci.service.InterviewService;
import com.yash.arci.service.QuestionService;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;

@RestController
@RequestMapping("associates")
@CrossOrigin("*")
public class AssociatesController {

	@Autowired
	InterviewService interviewService;

	@Autowired
	QuestionService questionService;
	
	@Autowired
	AppNotifcationService appNotificationService;
	
	@RolesAllowed({ "ROLE_ADMIN", "ROLE_USER" })
	@GetMapping("/search/{associateId}")
	@ApiImplicitParams({
			@ApiImplicitParam(name = "Authorization", value = "Authorization token", required = true, dataType = "string", paramType = "header") })
	public ResponseEntity<?> getSearchAssociateResponseByAssociateId(@PathVariable Long associateId) {
		List<SearchAssociateDto> searchAssociateList = interviewService.getInterviewDetailsByAssociateId(associateId);
		System.out.println(searchAssociateList);
		if (searchAssociateList == null || searchAssociateList.isEmpty()) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<List<SearchAssociateDto>>(searchAssociateList, HttpStatus.OK);
	}

	@RolesAllowed({ "ROLE_ASSOCIATE" })
	@PostMapping("/associateFeedback")
	@ApiImplicitParams({
			@ApiImplicitParam(name = "Authorization", value = "Authorization token", required = true, dataType = "string", paramType = "header") })
	public ResponseEntity<?> submitAssociateFeedback(@RequestBody AssociateFeedbackDto feedback) {
		
		questionService.submitFeedback(feedback);
		appNotificationService.pushAssociateFeedbackNotification(feedback);
		return new ResponseEntity<>(new ApiResponse(true, "Successfully Submitted"), HttpStatus.OK);
	}
}
